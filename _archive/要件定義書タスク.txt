## I. 基盤構築タスク

**1. プロジェクト初期設定とディレクトリ構成の整備**  
1.1 アーキテクチャ層とディレクトリ構成の策定  
  1.1.1 Presentation（UI、BLoC、ウィジェット）  
  1.1.2 Domain（ユースケース、エンティティ、インターフェース）  
  1.1.3 Data（リポジトリ、API連携、ローカルDB、データ変換）  
  1.1.4 共通モジュール（ユーティリティ、定数、エラーハンドリング）  
1.2 コーディング規約とLint設定の導入  
  1.2.1 Dart/Flutter向けLintルール（Effective Dartなど）の採用  
  1.2.2 静的解析ツール（dart analyze）の設定とCIへの組み込み  
1.3 環境ごとの設定管理  
  1.3.1 開発／ステージング／本番向け設定ファイルの整備  
  1.3.2 APIエンドポイント、APIキー、デバッグオプション等の環境変数管理

**2. 各種ライブラリ導入と初期設定**  
2.1 状態管理・依存性注入ライブラリの導入  
  2.1.1 flutter_bloc の導入と基本セットアップ  
  2.1.2 get_it および injectable を用いたDI環境の構築（自動コード生成含む）  
2.2 ローカルDBおよびセキュアストレージの導入  
  2.2.1 Hive の導入、ボックス設計と初期化処理の実装  
  2.2.2 flutter_secure_storage の導入とGemini APIキー等の安全な保存  
2.3 API連携・通知・外部サービス接続ライブラリの導入  
  2.3.1 HTTPクライアント（dio または http）の導入と設定  
  2.3.2 Flutter Local Notifications プラグインの設定  
  2.3.3 Firebase Analytics SDK の導入と初期化設定  
2.4 その他ユーティリティライブラリの導入  
  2.4.1 画像ピッカー、ファイルアップロードライブラリの導入  
  2.4.2 ロギング（logger など）およびエラートラッキング（Sentryなど）の設定

**3. 多言語対応基盤の構築**  
3.1 国際化フレームワークの導入  
  3.1.1 intl、flutter_localizationsの導入と基本設定  
3.2 翻訳リソース管理体制の構築  
  3.2.1 ARB、JSON、YAMLなどのリソースファイル管理方法の決定  
  3.2.2 リソースファイルの作成とビルド時の変換処理の実装  
3.3 UIの多言語対応と動的翻訳連携  
  3.3.1 画面内文言のリソース化および言語切替UIの実装  
  3.3.2 Gemini API連携による動的コンテンツの翻訳（プリセットデータ等）の検討と実装  
3.4 多言語テストとデバッグ  
  3.4.1 各言語でのレイアウト検証、文字化けチェック

**4. 依存性注入（DI）のセットアップ**  
4.1 DIコンテナの初期化と設定  
  4.1.1 get_it を用いたDIコンテナの初期化コード作成  
  4.1.2 injectable を用いた自動コード生成環境の構築  
4.2 各層への依存関係登録  
  4.2.1 Presentation層：BLoCやサービスの登録  
  4.2.2 Domain層：ユースケース、リポジトリインターフェースの登録  
  4.2.3 Data層：APIクライアント、ローカルDBインスタンスの登録  
4.3 DI環境の動作検証とテスト

**5. ローカルDBの構築と運用設計**  
5.1 スキーマ設計とHiveボックス定義  
  5.1.1 タイマー、キャラクター、通知履歴、ユーザー設定、サブスクリプション各エンティティ用ボックスの設計  
  5.1.2 型アダプターの作成と登録  
5.2 初期化処理とマイグレーション戦略の策定  
  5.2.1 アプリ起動時のHive初期化と各ボックスオープン処理の実装  
  5.2.2 今後のスキーマ変更に備えたマイグレーションルールの策定  
5.3 ユニットテストとの統合環境構築

**6. 共通基盤機能・ユーティリティの整備**  
6.1 エラーハンドリングとロギング基盤の構築  
  6.1.1 共通エラーハンドラの実装（例外キャッチ、ユーザー通知処理）  
  6.1.2 ログ管理ユーティリティクラスの作成と活用  
6.2 設定管理と共通定数の一元管理  
  6.2.1 グローバル設定、定数、環境変数管理用クラスの作成  
6.3 ネットワーク通信の共通ライブラリの実装  
  6.3.1 HTTPリクエスト共通処理（リトライ、タイムアウト）のラッパー実装

**7. CI/CD環境と開発プロセス基盤の整備**  
7.1 CI/CDパイプライン構築  
  7.1.1 GitHub Actions等のCIツールのセットアップとYAMLファイル作成  
  7.1.2 自動ビルド、テスト、静的解析、カバレッジレポート生成の設定  
7.2 自動デプロイとリリースプロセスの整備  
  7.2.1 Android／iOS 向け自動ビルド、署名、ストア提出スクリプトの作成  
  7.2.2 リリース後のクラッシュレポート、ユーザーフィードバック収集体制の構築  
7.3 プロジェクトドキュメントとタスク管理体制の整備  
  7.3.1 アーキテクチャ、ディレクトリ構成、コーディング規約の文書化  
  7.3.2 タスク管理ツール（Jira、Trello、GitHub Issues等）の運用ルール策定

---

## II. 機能実装タスク

**8. タイマー設定機能**  
8.1 日時・時間範囲設定の実装  
  8.1.1 カレンダーおよび時刻ピッカーUIの実装  
  8.1.2 「日時の設定」「特定時間のみ」「特定時間範囲」選択UIの実装  
  8.1.3 入力フォームの作成とバリデーション、データ保存処理の実装  
8.2 繰り返し設定の実装  
  8.2.1 繰り返しオプション（毎日、毎週／隔週、毎月等）のUI実装  
  8.2.2 日付計算アルゴリズム、次回実行日時算出ロジックの実装と単体テスト  
8.3 タイマー設定テスト機能の実装  
  8.3.1 テスト通知ボタンのUI実装  
  8.3.2 Gemini API呼び出しモックの作成とレスポンスパース処理実装  
  8.3.3 成功時／失敗時のユーザー通知（トースト、アラート）の実装  
8.4 通知準備機能の実装  
  8.4.1 通知予定時刻の10分前検知ロジックおよびスケジュール管理の実装  
  8.4.2 Gemini APIへの非同期プロンプト送信、タイムアウト・リトライ処理の実装  
  8.4.3 レスポンス受信後の正確な通知発行処理の実装

**9. キャラクター通知生成機能**  
9.1 担当キャラクター選出機能の実装  
  9.1.1 タイマー設定時に入力された候補リスト取得処理の実装  
  9.1.2 乱数生成を用いたランダム選出ロジックの実装（空リスト、1件のみ対策含む）  
  9.1.3 選出結果を画面にフィードバックするテストUIの実装  
9.2 メッセージ生成機能の実装  
  9.2.1 ユーザー指定またはランダム話題に基づくプロンプト作成ロジックの実装  
  9.2.2 Gemini API連携処理とレスポンス受信、エラーチェックの実装  
  9.2.3 全角200文字以内にトリミングするフィルタリング処理の実装  
9.3 プロンプト補助機能（新規キャラクター登録時）の実装  
  9.3.1 ユーザー入力フォーム（台詞、説明文）の作成  
  9.3.2 内部テンプレートとの統合処理とマージロジックの実装  
  9.3.3 Gemini API送信とレスポンスを初期設定としてUI表示する処理の実装  
9.4 天候情報付加機能の実装  
  9.4.1 ユーザー設定地点およびGPS情報の取得処理の実装  
  9.4.2 天候情報API連携とレスポンス解析、エラーチェック処理の実装  
  9.4.3 取得天候情報の適切なフォーマットへの統合処理の実装

**10. 通知履歴管理・CSVエクスポート機能**  
10.1 通知履歴の保存機能の実装  
  10.1.1 Hive用スキーマ設計（通知日時、メッセージ、キャラクター名のボックス設計）  
  10.1.2 通知送信イベントからデータを抽出し、永続化する保存ロジックの実装  
  10.1.3 履歴一覧表示UI（リストビューまたはカード形式）の実装  
10.2 CSVエクスポート機能の実装  
  10.2.1 Hiveからの履歴データ取得処理の実装  
  10.2.2 CSVフォーマットへの変換ロジックの実装  
  10.2.3 エクスポート用ボタン配置、進捗表示、完了通知UIの実装  
  10.2.4 有料ユーザーか否かのサブスクリプションチェック処理の実装

**11. キャラクター／プリセット管理機能**  
11.1 プリセット選択・表示機能の実装  
  11.1.1 作品グループをカード形式で一覧表示するUIの実装  
  11.1.2 キャラクター一覧表示（リスト、ソート、フィルタ）の実装  
  11.1.3 プリセットデータ取得とキャッシュ処理の実装  
  11.1.4 表示言語切替（UI＋Gemini翻訳連携）の実装  
11.2 キャラクターカスタマイズ・複製機能の実装  
  11.2.1 編集用フォーム（名前、プロンプト、パラメータ）の実装  
  11.2.2 編集内容の保存とHiveへの同期処理の実装  
  11.2.3 プリセット情報からのキャラクター複製処理と新規エンティティ登録の実装  
11.3 作品エンティティ連携機能の実装  
  11.3.1 用語定義管理UI（一覧、追加・編集フォーム）の実装  
  11.3.2 メッセージ生成時に自動連携する処理の実装  
  11.3.3 作品データの保存・更新・削除ロジックの実装

**12. ユーザー設定・サブスクリプション管理**  
12.1 Gemini APIキー管理の実装  
  12.1.1 キー入力フォームの作成とスタイリング  
  12.1.2 入力値のバリデーション（必須チェック、フォーマット検証）の実装  
  12.1.3 テスト接続機能（API呼び出し、結果表示）の実装  
  12.1.4 flutter_secure_storageを使ったセキュア保存処理の実装  
12.2 UI表示言語自動判定・切替機能の実装  
  12.2.1 端末APIを利用したシステム言語取得と初期UI言語設定の実装  
  12.2.2 ユーザーによる言語選択UI（ドロップダウン、スイッチ）の実装  
  12.2.3 選択言語に応じたGemini API翻訳呼び出し処理の実装  
12.3 サブスクリプション管理機能の実装  
  12.3.1 プラン状態（無料、有料）管理ロジックの実装  
  12.3.2 追加タイマー、CSVエクスポート、画像通知の利用可否判定処理の実装  
  12.3.3 プラン変更時のダイアログとユーザーへのフィードバックUIの実装

**13. ローカル通知連携・画像通知機能**  
13.1 ローカル通知実装  
  13.1.1 Flutter Local Notifications プラグインの初期設定とプラットフォーム別設定の実装  
  13.1.2 タイマー設定に基づいた通知スケジュール登録ロジックの実装  
  13.1.3 通知送信後のコールバック処理と履歴保存との連携実装  
  13.1.4 通知送信エラー検知、再試行処理、エラーログ出力の実装  
13.2 画像通知機能の実装（有料オプション）  
  13.2.1 画像ピッカーUIの実装とプレビュー機能の追加  
  13.2.2 画像情報を通知メッセージと連携させる処理の実装  
  13.2.3 有料オプション利用のプランチェックとUI制御の実装

**14. Firebase Analytics連携**  
14.1 Firebase Analytics SDK導入と初期化設定の実装  
14.2 通知日時、担当キャラクター名、メッセージ（上限文字切り捨て）のイベント項目定義  
14.3 通知送信後にイベント発火する処理とエラーハンドリングの実装

**15. セキュリティ対策（機能側）**  
15.1 機密情報（APIキー、ユーザー設定、キャラクター情報）の暗号化保存処理の実装  
15.2 通信の安全性確保（HTTPSの利用、通信中のエラーチェック、再試行処理）の実装  
15.3 コード難読化対策（ProGuard/R8設定ファイル作成、ビルドプロセスへの統合、動作検証テスト）の実施

**16. テスト・品質保証**  
16.1 ユニットテストの設計と実装  
  16.1.1 各ユースケース、BLoC、ロジックのテストケース作成  
  16.1.2 モックAPIおよびHiveモック環境の整備とテストコード作成  
16.2 統合テストのシナリオ作成と実行  
  16.2.1 Presentation、Domain、Data層間の連携テストシナリオ作成  
  16.2.2 通知送信フローや異常系シナリオの統合テストの実装  
16.3 UIテストの自動化  
  16.3.1 主要画面の遷移、ユーザーインタラクション、言語切替等のテストケース作成と自動テスト環境構築

**17. CI/CD・デプロイメント（機能実装側）**  
17.1 自動ビルド、テスト、静的解析、カバレッジレポート生成スクリプトの整備  
17.2 自動デプロイプロセスの実装（Android／iOS 向けビルド、署名、ストア提出）  
17.3 リリース後のフィードバック（クラッシュレポート、ユーザーフィードバック）収集とドキュメント化
