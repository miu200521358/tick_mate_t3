# TickMate 要件定義書（新メンバー向け・更新版）

---

## 1. システム概要

TickMateは、ユーザーが設定したタイマーに基づき、アプリ内でキャラクターが自発的にメッセージを生成し、ローカル通知として送信するアプリです。主な目的は、ユーザーの日常にエンターテイメントと利便性を提供することです。TickMateは以下の主要な機能を持ちます。

- **タイマー設定**  
  ユーザーは特定の日時に加え、「10:00～18:00」などの任意の時間範囲を設定可能です。タイマー設定は「日時の設定」「特定時間だけの設定」「特定時間範囲の設定」の3パターンがあり、後者では繰り返し設定（毎日、毎週／隔週、毎月第○曜日／隔月、毎月○日／隔月、一定日数おき）が可能です。

- **タイマー種別**  
  タイマーは「予定通知」と「近況報告」の2種別を持ち、全角200文字以内のメッセージをGemini APIで生成して送信します。  
  - 予定通知：ユーザー指定の用件に基づくメッセージを生成。  
  - 近況報告：ランダムな話題に基づくメッセージを生成し、キャラクターが自発的にメッセージを送っている印象を与えます。

- **担当キャラクター選出**  
  タイマー設定時に指定された候補者リストから、発動時にランダムに1名の担当キャラクターを選出します。（各IDはUUIDで生成）

- **通知カスタマイズ**  
  各タイマーには、ユーザーが用意した通知音を個別に設定可能です。また、ユーザーが設定した地点情報またはスマホの現在地を利用して、Gemini APIで天候情報を取得し、通知メッセージに付加します（地点未設定の場合は付加しません）。  
  画像通知は、ユーザーがアップロードした画像（有料オプション）を添付可能です。

- **メッセージ生成 & プロンプト補助**  
  タイマー通知のメッセージは、Gemini APIを用いて生成され、全角200文字以内に収められます。  
  新規キャラクター登録時は、ユーザーが入力した台詞などの生データと、アプリ内部で定義されたレスポンスフォーマット／プロンプトテンプレートを組み合わせ、プロンプトを自動生成してGemini APIに送信します。返されたレスポンスは初期設定として提示され、その後ユーザーがキャラクターの呼ばれ方やパラメータをカスタマイズできます。

- **作品エンティティ**  
  各作品に対して、用語とその意味の定義を保持します。これらの用語定義は、キャラクター登録時には入力されず、**メッセージ生成時のプロンプトに自動的に追加**され、キャラクターの背景情報として利用されます。  
  ユーザーは用語と意味のペアを追加・編集・カスタマイズ可能です。

- **キャラクター複製機能**  
  同一プリセットから複数回キャラクターを登録（複製）することが可能です。同位体のように、同一の基本設定を持つキャラクターを複製し、各タイマーで個別にカスタマイズできます。

- **通知履歴管理とCSVエクスポート**  
  送信された通知（通知日時、通知メッセージ、通知担当キャラクター名）はローカル（Hive）に保存されます。有料サブスクリプションが有効なユーザーは、CSV形式でのエクスポート機能を利用可能です。

- **タイマー設定テスト機能**  
  ユーザーは設定したタイマーに基づき、即時にローカル通知を送信してテストできる機能を利用できます。

- **通知準備機能**  
  生成AIのレスポンスを待つ必要があるため、指定された通知時刻の10分前にGemini APIへのプロンプト送信など通知準備を開始し、レスポンスが完了した後、正確な通知時刻にローカル通知を送信します。

- **多言語対応**  
  UIはスマホのシステム言語を自動検出し、日本語または英語で表示されます。プリセットデータは日本語ベースですが、ユーザーは「スマホの表示言語」「日本語」「英語」から選択でき、英語の場合はGemini APIで翻訳されます。（翻訳結果はUI表示のみ、キャラクター設定で保存された内容はDBに保持）

- **Firebase Analytics連携**  
  ローカル通知送信時に、通知日時、通知担当キャラクター名、通知メッセージ（送信可能な上限文字数で切り捨て）がFirebase Analyticsに送信され、利用状況が追跡されます。

---

## 2. ユーザー要件

### 2.1 タイマー管理
- ユーザーは、カレンダー・時刻ピッカーを使ってタイマーの発動日時および（近況報告種別の場合のみ）任意の時間範囲（例：10:00～18:00）を設定できる。
- タイマー設定は「日時の設定」「特定時間だけの設定」「特定時間範囲の設定」の3パターンがあり、後者では繰り返し設定が可能。  
  ※繰り返しオプション：繰り返しなし、毎日、毎週／隔週、毎月第○曜日／隔月、毎月○日／隔月、一定日数おき。
- タイマー種別として「予定通知」と「近況報告」を選択し、各種別に応じたメッセージが生成される。
- 各タイマーに対して、ユーザーが用意した通知音を個別設定できる。
- ユーザーは通知に付加するため、「任意の地点」または「スマホの現在地」を設定できる。（設定しなければ天候情報は付加されない）
- タイマー設定テスト機能により、ユーザーは設定内容に基づく通知を即時に送信してテストできる。

### 2.2 キャラクター／プリセット管理
- プリセットデータは、キャラクターの性格、口調、プロンプトテキスト、作品ごとのワールド設定を日本語で管理する。  
  ユーザーは「スマホの表示言語」「日本語」「英語」の表示言語を選択可能。（英語選択時はGemini APIで翻訳）
- ユーザーは、プリセットから選択したキャラクターの呼ばれ方、プロンプトテキスト、その他パラメータを自由に編集し、カスタマイズ済み設定として保存、複数タイマーで再利用可能とする。
- タイマー設定時に、ユーザーは1人以上の担当キャラクター候補をリストで指定し、発動時にその中からランダムに1名を選出する。
- ユーザーは、プリセット以外に任意の作品グループを追加し、その中でキャラクター設定および作品のワールド設定（用語と意味の定義）を追加・カスタマイズできる。

### 2.3 通知管理
- 送信された通知は、通知日時、通知メッセージ、通知担当キャラクター名を「通知履歴エンティティ」としてローカルに保存する。  
  ユーザーデータ削除時に通知履歴は削除される。  
  ※CSVエクスポート機能は、有料サブスクリプションが有効なユーザーのみ利用可能。
- 画像通知機能（ユーザーがアップロードしたキャラクター画像の添付）は有料オプションとして提供される。

### 2.4 その他の設定
- ユーザーは自身のGemini APIキーを入力、テスト、セキュアに保存できる。
- アプリのUIは、スマホのシステム言語を自動検出し、日本語または英語で表示される。

---

## 3. 機能要件

### 3.1 タイマー設定機能
- **日時・時間範囲設定**  
  ユーザーは、特定の日時と（近況報告種別の場合のみ）任意の時間範囲（例：10:00～18:00）を設定できる.
- **タイマー設定パターン**  
  「日時の設定」「特定時間だけの設定」「特定時間範囲の設定」の3パターンを提供.  
  ※後者2パターンでは、繰り返し設定オプション（繰り返しなし、毎日、毎週／隔週、毎月第○曜日／隔月、毎月○日／隔月、一定日数おき）が可能.
- **タイマー種別**  
  - 予定通知：全角200文字以内で、ユーザー指定の用件に基づくメッセージを生成して送信 (Gemini API利用).
  - 近況報告：全角200文字以内で、ランダムな話題のメッセージを生成して送信 (Gemini API利用).
- **通知音設定**  
  各タイマーに対して、ユーザーが用意した通知音を個別設定できる.
- **天候情報付加**  
  ユーザーが設定した地点情報またはスマホの現在地を元に、Gemini APIで天候情報を取得し、通知メッセージに付加する.  
  ※地点未設定の場合は天候情報は付加しない.
- **通知準備機能**  
  生成AIのレスポンス待ちのため、指定された通知時刻の10分前に通知準備を開始し、レスポンスが完了したら、指定された時刻にローカル通知を送信する.
- **タイマー設定テスト機能**  
  ユーザーは、設定したタイマーに基づき即時にローカル通知を送信してテストできる機能を利用できる.

### 3.2 キャラクター通知生成機能
- タイマー発動時、設定された担当キャラクター候補リストからランダムに1名を選出する.
- Gemini APIを利用して、選ばれたキャラクターのプロンプト（ユーザーカスタム済みまたはバンドル済み日本語プリセット）に基づきメッセージを生成する.  
  ※タイマー種別が「近況報告」の場合は、ランダムな話題のメッセージを生成する.
- ユーザー設定の地点情報がある場合、Gemini API経由で天候情報を取得し、生成メッセージに付加する.

### 3.3 通知履歴・画像通知機能
- **通知履歴エンティティ**  
  以下の情報を保持する:  
  - 通知日時  
  - 通知メッセージ  
  - 通知担当キャラクター名
- **画像通知**  
  ユーザーがアップロードしたキャラクター画像を通知に添付して送信する（有料オプション）.

### 3.4 CSVエクスポート機能
- **サブスクリプション制限**  
  CSVエクスポート機能は、有料サブスクリプションが有効なユーザーのみ利用可能.
- **エクスポート対象**  
  ローカルDBに保存されている通知履歴の全情報（通知日時、通知メッセージ、通知担当キャラクター名）をエクスポートする.
- **出力形式・UI**  
  CSV形式で出力し、通知履歴画面に「CSVエクスポート」ボタンを配置する.  
  サブスクリプションが無効の場合は、ボタンを非表示または利用不可.
- **実行フィードバック**  
  エクスポート実行中は進行状況および完了通知を表示する.

### 3.5 Firebase Analytics連携
- **通知イベント送信**  
  ローカル通知送信時に、以下の情報をFirebase Analyticsに送信する:  
  - 通知日時  
  - 通知担当キャラクター名  
  - 通知メッセージ（送信可能な上限文字数に切り捨て）
- **目的**  
  通知機能の利用状況およびアプリ利用動向を把握する.

---

## 4. 非機能要件
- **パフォーマンス**  
  タイマー処理、メッセージ生成、ローカル通知送信は低遅延で実行される.
- **セキュリティ**  
  Gemini APIキーや機密情報は `flutter_secure_storage` を使用して暗号化保存する.  
  すべての外部API通信（Gemini API）はHTTPSを使用し、コード難読化でリバースエンジニアリング対策を実施する.
- **拡張性**  
  クリーンアーキテクチャに基づき、Presentation、Domain、Data層を明確に分離し、将来的な機能追加（プリセット更新、ユーザー間のカスタムキャラクター共有、追加通知チャネルなど）を容易にする.

---

## 5. システム構成

### 5.1 技術スタック
- **プラットフォーム**: Flutter (Dart)
- **アーキテクチャ**: Clean Architecture (Presentation, Domain, Data層)
- **状態管理**: flutter_bloc
- **依存性注入**: get_it / injectable
- **ローカルストレージ**: Hive
- **セキュアストレージ**: flutter_secure_storage
- **ローカル通知**: Flutter Local Notificationsプラグイン
- **外部API**: Gemini API (メッセージ生成、翻訳、天候情報取得)
- **Firebase Analytics**: 通知イベント追跡用

### 5.2 アーキテクチャ図

ユーザーデバイス  
↓  
Flutterアプリ  
├─ Presentation層 (UI, BLoC, 多言語対応)  
├─ Domain層 (ユースケース, エンティティ)  
└─ Data層 (リポジトリ, Remote/Localデータソース)  
  ├─ Gemini API (メッセージ生成・翻訳、天候情報取得)  
  └─ ローカル通知 (タイマー通知送信)

---

## 6. 詳細設計

### 6.1 Presentation層

#### 6.1.1 主要画面

**スプラッシュ画面**  
- ブランドロゴとローディングアニメーションを表示する.

**ホーム画面**  
- タイマー一覧をカード形式で表示する.  
- ボトムナビゲーションは以下の4タブで構成:  
  1. タイマー一覧  
  2. 通知履歴一覧  
  3. キャラクター設定  
  4. アプリ設定（サブスクリプション機能含む）  
- 画面上部に「追加」ボタン（Webスタイル）を配置し、タイマー上限に達すると非活性化する.

**タイマー詳細画面**  
- カレンダー・時刻ピッカーで発動日時を設定する.  
- 近況報告種別の場合は、任意の時間範囲（例：10:00～18:00）の設定が可能.  
- タイマー設定パターンとして、「日時の設定」「特定時間だけの設定」「特定時間範囲の設定」の3パターンを提供する.  
  ※後者2パターンでは、繰り返し設定オプション（繰り返しなし、毎日、毎週／隔週、毎月第○曜日／隔月、毎月○日／隔月、一定日数おき）を表示する.
- タイマー種別（予定通知／近況報告）を選択する.  
  - 予定通知：全角200文字以内でユーザー指定用件に基づくメッセージを生成して送信 (Gemini API利用).  
  - 近況報告：全角200文字以内でランダムな話題のメッセージを生成して送信 (Gemini API利用).
- 各タイマーごとに、ユーザーが用意した通知音を個別設定できる.
- ユーザー設定の地点情報または現在地を基に、Gemini APIで天候情報を取得し、通知メッセージに付加する (地点未設定なら付加しない).
- 担当キャラクターは、タイマー設定時に指定された候補者リストからランダムに選出する.
- キャラクター設定でアップロードされた画像 (有料オプション) がある場合、表示および通知に添付する.
- 「保存」ボタンで設定内容をHiveに保存する.
- **タイマー設定テスト機能**:  
  設定内容に基づき、即時にローカル通知を送信してテストできるボタンを配置する.
- **通知準備機能**:  
  通知予定時刻の10分前に、Gemini APIへプロンプト送信等の通知準備を開始し、生成AIのレスポンスが完了次第、指定時刻にローカル通知を送信する.

**プリセット選択画面**  
- 作品グループ（例：刀剣乱舞、ツイステ、ネオロマンス等）をカード形式で表示する.
- グループ選択後、グループ内のキャラクター一覧および詳細 (性格、口調、プロンプト概要、キャラクターの呼ばれ方) を表示する.
- 「まとめて選択」機能により、グループ全体をユーザーデータとして取り込むオプションを提供する.
- プリセット表示言語切替ボタンを配置し、「スマホの表示言語」「日本語」「英語」から選択可能とする.
  - 英語選択時はGemini APIで翻訳する.

**カスタマイズ画面（新規キャラクター登録補助機能）**  
- ユーザーが新規キャラクター登録時に、台詞などの生データを入力するフォームを提供する.
- アプリ内部で定義されたレスポンスフォーマット／プロンプトテンプレートとユーザー入力を組み合わせたプロンプトを自動生成し、Gemini APIに送信する.
- 返されたレスポンスを初期設定として提示し、その後、ユーザーはキャラクターの呼ばれ方、プロンプトテキスト、各種パラメータをカスタマイズできる.
- 編集内容はユーザーキャラクターデータとして保存し、複数のタイマーで再利用可能とする.

**設定画面**  
- Gemini APIキーの入力、テスト、セキュア保存機能を提供する.
- UIはスマホのシステム言語に基づき自動判定し、日本語または英語で表示する.
- サブスクリプション機能の設定を含む.

**通知履歴画面**  
- 送信されたローカル通知の送信日時、通知メッセージ、通知担当キャラクター名を一覧表示する.
- CSVエクスポート機能（有料サブスクリプション有効時のみ）を提供する.

**Firebase Analytics連携**  
- ローカル通知送信時に、通知日時、通知担当キャラクター名、通知メッセージ（上限文字数に切り捨て）をFirebase Analyticsに送信する.

#### 6.1.2 状態管理
- 各画面は `flutter_bloc` を用いて、タイマー作成、キャラクター選択・カスタマイズ、設定更新、通知履歴管理、テスト通知実行、Firebase Analyticsイベント送信などのイベントと状態を管理する.

---

### 6.2 Domain層

#### 6.2.1 エンティティ設計（日本語）
- **タイマーエンティティ**  
  - タイマーID：UUIDで生成された一意のID  
  - タイトル：タイマーの名称または説明  
  - 発動日時：タイマーが起動する基本日時  
  - 時間範囲：例「10:00～18:00」などの任意の時間範囲  
  - 繰り返し設定：毎週／隔週、毎月第○曜日／隔月、毎月○日／隔月、一定日数おき、毎日のオプション  
  - タイマー種別：予定通知 または 近況報告  
  - 通知音設定：ユーザーが設定した通知音  
  - 担当キャラクター候補リスト：タイマー設定時に指定された1人以上の候補者リスト  
  - 天候情報地点：ユーザーが指定する任意の地点またはスマホの現在地（未設定の場合は天候情報付加なし）

- **キャラクターエンティティ**  
  - キャラクターID：UUIDで生成された一意のID  
  - 作品名：キャラクターが属する作品名  
  - キャラクター名：キャラクターの名前  
  - プロンプトテキスト（日本語）：キャラクターの性格、口調等の基本テキスト  
  - カスタマイズ情報：ユーザーが編集したプロンプトテキスト、呼ばれ方、各種パラメータ  
  - ※翻訳済みテキストはUI表示用のみ（DBには保持しない）

- **作品エンティティ**  
  - 作品ID：UUIDで生成された一意のID  
  - 作品名：作品の名称  
  - 用語定義：用語とその意味のペアのリスト  
    - ※この用語定義は、キャラクター登録時には入力せず、メッセージ生成時のプロンプトに自動追加する.  
    - ユーザーは用語と意味のペアを追加・編集・カスタマイズ可能.

- **サブスクリプションエンティティ**  
  - プラン情報：利用中のサブスクリプションプラン（無料、追加タイマー有料プランなど）  
  - 追加タイマー数：サブスクリプションで利用可能な追加タイマーの数  
  - 有効期間：サブスクリプションの有効期限  
  - ユーザーID：対象ユーザーの識別子

- **ユーザー設定エンティティ**  
  - Gemini APIキー：ユーザーが入力したGemini APIキー  
  - UI表示言語：スマホのシステム言語に基づくUI表示（自動切替）  
  - プリセット表示言語設定：「スマホの表示言語」「日本語」「英語」から選択  
  - 天候情報地点設定：通知に付加するための地点情報

- **通知履歴エンティティ**  
  - 通知日時：通知が送信された日時  
  - 通知メッセージ：送信されたメッセージ内容  
  - 通知担当キャラクター名：通知時に選出されたキャラクターの名前

#### 6.2.2 ユースケース
- タイマーの作成、編集、削除、および通知実行  
  (Gemini APIによるメッセージ生成・翻訳、ローカル通知送信、天候情報付加)
- プリセットキャラクターの選択およびユーザーキャラクターデータの作成・更新
- 新規キャラクター登録時のプロンプト補助機能：  
  ユーザーが入力した台詞などの生データと、アプリ内部のレスポンスフォーマット／プロンプトテンプレートを組み合わせたプロンプトを自動生成し、Gemini APIに送信。  
  返されたレスポンスを初期設定として提示し、その後、ユーザーはキャラクターの呼ばれ方や各種パラメータをカスタマイズできる.
- 作品エンティティの用語定義情報を、メッセージ生成時のプロンプトに自動追加する.
- Gemini APIキーの検証および更新.
- サブスクリプションプランの管理.

---

### 6.3 Data層

#### 6.3.1 ローカルデータソース
- **データベーススキーマ**:  
  Hiveを使用して、以下のボックスを設計する:  
  - タイマー情報ボックス  
  - キャラクターデータ（ユーザーカスタム）ボックス  
  - 作品ボックス  
  - ユーザー設定ボックス  
  - サブスクリプション情報ボックス  
  - 通知履歴ボックス  
  プリセットデータはアプリにバンドル（日本語ベース）し、ユーザーカスタマイズは別ボックスに保存する.
- **キャッシュ管理**:  
  タイマー設定、ユーザーキャラクターデータ、通知履歴はHiveに保存する.
- **セキュアストレージ**:  
  Gemini APIキーなどの機密情報は `flutter_secure_storage` で暗号化して保存する.

#### 6.3.2 リモートデータソース
- **Gemini API**:  
  プロンプトリクエスト送信、メッセージ生成、翻訳、及び天候情報取得機能を提供する.
- **ローカル通知**:  
  ローカル通知機能を用いて、タイマーに基づく通知のスケジューリングと送信を行う.

#### 6.3.3 リポジトリ
- Domain層とData層のデータ交換を抽象化するため、以下のリポジトリを定義する:  
  - タイマーリポジトリ  
  - キャラクタリポジトリ  
  - 作品リポジトリ  
  - ユーザー設定リポジトリ  
  - サブスクリプションリポジトリ  
  - 通知履歴リポジトリ  
- `get_it` と `injectable` を用いて依存性注入を実装する.

---

### 6.4 外部連携 & 多言語対応

#### 6.4.1 Gemini API連携
- **処理フロー**:
  1. タイマー発動時、関連キャラクターのプロンプトテキストを取得する  
     (ユーザーカスタムがあればそれを使用し、無ければバンドル済みの日本語プリセットを使用)。
  2. プリセット表示言語設定を確認し、「日本語」ならそのまま使用する。  
     - 「スマホの表示言語」または「英語」の場合は、Gemini APIの翻訳機能を呼び出して指定された出力言語に変換する.
  3. タイマー種別に応じ、  
     - 予定通知の場合：ユーザー指定の用件に基づいたメッセージを生成する。  
     - 近況報告の場合：ランダムな話題のメッセージを生成する.
  4. 作品エンティティの用語定義情報を生成するプロンプトに自動追加する.
  5. ユーザーが設定した地点情報または現在地がある場合、Gemini APIを通じて天候情報を取得し、生成メッセージに付加する.  
     ※地点情報未設定の場合は天候情報は付加しない.
  6. 生成されたメッセージは全角200文字以内に収め、**通知予定時刻の10分前に通知準備を開始**し、生成AIのレスポンスが完了したら指定時刻にローカル通知として送信する.
- **エラーハンドリング**:  
  タイムアウト、リトライ、エラーコード解析および適切なユーザーフィードバックを実装する.

#### 6.4.2 ローカル通知連携
- タイマーに基づくローカル通知を生成・送信する.
- ユーザーがアップロードしたキャラクター画像（有料オプション）がある場合、通知に添付可能とする.
- 送信された通知の履歴（通知日時、通知メッセージ、通知担当キャラクター名）はHiveに保存する.

#### 6.4.3 多言語対応
- **UI**:  
  スマホのシステム言語を自動検出し、UI全体を日本語または英語で表示する.
- **プリセットデータ**:  
  基本は日本語で管理し、ユーザーは「スマホの表示言語」「日本語」「英語」のいずれかを選択可能とする.  
  ※英語選択時はGemini APIで翻訳し、翻訳結果はUI表示のみで保持する.  
  ※ユーザーがキャラクター設定で保存した場合は、その内容をDBに保持する.

#### 6.4.4 Firebase Analytics連携
- **通知イベント送信**:  
  ローカル通知送信時に、以下の情報をFirebase Analyticsに送信する:  
  - 通知日時  
  - 通知担当キャラクター名  
  - 通知メッセージ（送信可能な上限文字数に切り捨て）
- **目的**:  
  通知機能の利用状況およびアプリ利用動向を把握する.

---

## 7. セキュリティ設計
- **機密情報の保護**:  
  Gemini APIキー、ユーザー設定、カスタマイズデータは `flutter_secure_storage` を使用して暗号化保存する.
- **通信の安全性**:  
  すべての外部API通信（Gemini API）はHTTPSを使用する.
- **コード保護**:  
  リバースエンジニアリング対策として、コード難読化を実施する.

---

## 8. テスト計画

### 8.1 ユニットテスト
- Domain層のユースケースおよびエンティティ（タイマー作成ロジック、繰り返し設定計算等）のテストを実施する.
- 各BLoCの状態遷移およびイベント処理のテストを行う.

### 8.2 統合テスト
- Presentation、Domain、Data層間の連携テストを実施する.
- Gemini APIによるメッセージ生成・翻訳、天候情報取得、ローカル通知のスケジューリング・送信のシミュレーションテストを行う.

### 8.3 UIテスト
- Flutterの `integration_test` パッケージを利用し、主要画面（ホーム、タイマー詳細、プリセット選択、カスタマイズ、設定、通知履歴）の画面遷移、入力、言語切替、タイマー種別設定、テスト通知機能などのテストを自動化する.

---

## 9. デプロイメント計画

### 9.1 Android版
- 初期リリースをGoogle Playストアに公開する.
- CI/CDツール（例：GitHub Actions）を活用し、自動ビルド、テスト、デプロイを実施する.

### 9.2 iOS版
- Android版のフィードバックを踏まえ、iOS版展開を計画する.
- Apple Developer Programのガイドラインに従い、審査・提出プロセスを確立する.

---

## 10. 将来的な拡張性

- **プリセットデータのリモート更新**:  
  サーバー連携により、プリセットキャラクターのデータ更新を可能にする.
- **ユーザー間のカスタムキャラクター共有**:  
  ユーザーがカスタマイズしたキャラクターの共有および評価機能を検討する.
- **iOS展開**:  
  ユーザーフィードバックに基づいた多プラットフォーム展開を計画する.

---

## 11. まとめ

本要件定義に基づき、TickMateは以下の機能を持つシステムとして設計されます。

- ユーザーは、特定の日時と任意の時間範囲（例：10:00～18:00）を設定可能.
- タイマーは「予定通知」と「近況報告」の2種のタイマー種別を持ち、全角200文字以内のメッセージをGemini APIで生成して送信する.
- 担当キャラクターは、タイマー設定時に指定された候補者リストからランダムに選出される（各IDはUUIDで生成）.
- 各タイマーに対して、ユーザーが用意した通知音を個別に設定可能.
- ユーザーは、任意の地点またはスマホの現在地を用いて天候情報を取得し、通知メッセージに付加する（地点未設定の場合は付加しない）.
- 通知はローカル通知として送信され、送信された通知の履歴（通知日時、通知メッセージ、通知担当キャラクター名）はHiveに保存される.
  - CSVエクスポート機能は、有料サブスクリプションが有効なユーザーのみ利用可能.
- 画像通知（ユーザーアップロード画像）は有料オプションとして提供される.
- タイマー設定テスト機能により、ユーザーは即時に通知を送信して設定内容をテストできる.
- 通知準備機能により、通知予定時刻の10分前に生成AIへのプロンプト送信など通知準備を開始し、レスポンスが完了したら指定時刻に通知が送信される.
- UIはスマホのシステム言語に基づき自動的に日本語または英語で表示される.
- プリセットデータは日本語ベースで管理され、ユーザーは「スマホの表示言語」「日本語」「英語」から選択し、英語選択時はGemini APIで翻訳される（翻訳結果はUI表示のみ、キャラクター設定で保存された内容はDBに保持）.
- Firebase Analytics連携により、通知イベント（通知日時、担当キャラクター名、通知メッセージ（上限文字数切り捨て））が送信され、利用状況が追跡される.
- ホーム画面のナビゲーションは「タイマー一覧」「通知履歴一覧」「キャラクター設定」「アプリ設定」の4タブで構成し、アプリ設定内にサブスクリプション機能を含む.
- タイマー追加はWebスタイルの追加ボタンを使用し、上限に達すると非活性となる.
- ユーザーは任意の作品グループおよびワールド設定（用語と意味の定義）を追加・カスタマイズできる.
- **新規キャラクター登録時のプロンプト補助機能**:  
  ユーザーが生データ（台詞等）を入力すると、アプリ内部のレスポンスフォーマット／プロンプトテンプレートと組み合わせたプロンプトを自動生成し、Gemini APIに送信。  
  返されたレスポンスを初期設定として提示し、その後、ユーザーはキャラクターの呼ばれ方や各種パラメータをカスタマイズできる.
- **作品エンティティ**:  
  各作品に対して、用語とその意味の定義を保持する。  
  これらの用語定義は、メッセージ生成時のプロンプトに自動的に追加され、キャラクター登録時には入力されない。  
  ユーザーは用語と意味のペアを追加・編集・カスタマイズ可能.

本設計は、クリーンアーキテクチャに基づいてPresentation、Domain、Data層を明確に分離し、Gemini API、ローカル通知、Firebase Analyticsとの連携を通じて、ユーザーに直感的で魅力的な体験を提供するための基盤となります.

この要件定義書を基盤に、各モジュールの詳細仕様書を作成し、開発プロセスを進めてください.
